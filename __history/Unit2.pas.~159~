unit Unit2;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, Buttons, ComCtrls, Math, DB, MemDS, VirtualTable, Grids,
  DBGrids, SMDBGrid, Generics.Collections, Generics.Defaults;

type
    TEstatistica = record
        Numero : Integer;
        Qtd_Vezes : Integer;
    end;

type
  TForm2 = class(TForm)
    StatusBar1: TStatusBar;
    GroupBox1: TGroupBox;
    edQtdAcertos: TEdit;
    Label1: TLabel;
    edQtdAJogar: TEdit;
    Label2: TLabel;
    edQtdNumTotal: TEdit;
    Label3: TLabel;
    BitBtn1: TBitBtn;
    Memo1: TMemo;
    Label4: TLabel;
    edQtdJogos: TEdit;
    btGame: TBitBtn;
    Button1: TButton;
    vtApostas: TVirtualTable;
    dsApostas: TDataSource;
    SMDBGrid1: TSMDBGrid;
    vtNumbers: TVirtualTable;
    dsNumbers: TDataSource;
    vtNumbersnumber: TIntegerField;
    vtNumbersqtd: TIntegerField;
    gd1: TSMDBGrid;
    procedure FormShow(Sender: TObject);
    procedure BitBtn1Click(Sender: TObject);
    procedure btGameClick(Sender: TObject);
    procedure Button1Click(Sender: TObject);
  private
    iQtdAcertos, iQtdAJogar, iQtdTotal, iQtdJogosSelec, iQtdJogos : integer;
    JogoTmp: array[0..7] of integer;
    function fat(n: Integer): Integer;
    function GeraNumero(Jogados, iAtual : Integer ; var bAlteraJogo : Boolean) : Boolean;
    procedure Aposta;
    procedure Sort(Top: integer);
    function PodeJogar(Jogados: Integer): boolean;
    { Private declarations }

  public
    sSortedNum : TStringList;
    sTotalNum : TStringList;
    { Public declarations }
  end;

var
  Form2: TForm2;
  Estatistica : array of TEstatistica;

implementation

{$R *.dfm}

procedure TForm2.BitBtn1Click(Sender: TObject);
var
  i, iSorted : integer;
begin

  sTotalNum.Clear;
  sSortedNum.Clear;
  dsNumbers.DataSet.Open;
  while dsNumbers.DataSet.RecordCount <> 0 do
    dsNumbers.DataSet.Delete;
  for i := 1 to StrToInt(edQtdNumTotal.Text) do begin
    dsNumbers.DataSet.Append;
    dsNumbers.DataSet.FieldByName('number').AsInteger := i;
    dsNumbers.DataSet.FieldByName('qtd').AsInteger := 0;
    dsNumbers.DataSet.Post;
    sTotalNum.Add(IntToStr(i));
    sSortedNum.Add(IntToStr(i));
  end;
  Memo1.Clear;
  for i := 0 to StrToInt(edQtdNumTotal.Text)-1 do begin
    Memo1.Lines.Add(sSortedNum.Strings[i]);
  end;

  iQtdAcertos    := StrToInt(edQtdAcertos.Text);
  iQtdAJogar     := StrToInt(edQtdAJogar.Text);
  iQtdTotal      := StrToInt(edQtdNumTotal.Text);
  iQtdJogosSelec := StrToInt(edQtdJogos.Text);
  sSortedNum.Clear;
  for i := StrToInt(edQtdNumTotal.Text) downto 1 do begin
    iSorted := Random(i);
    sSortedNum.Add(sTotalNum.Strings[iSorted]);
    sTotalNum.Delete(iSorted);
  end;
  for i := 1 to StrToInt(edQtdNumTotal.Text) do begin
    sTotalNum.Add(IntToStr(i));
    sSortedNum.Add(IntToStr(i));
  end;
  Memo1.Clear;
  for i := 0 to StrToInt(edQtdNumTotal.Text)-1 do begin
    Memo1.Lines.Add(sSortedNum.Strings[i]);
  end;

  SetLength(Estatistica, iQtdTotal);
  for i := 0 to iQtdTotal-1 do
  begin
    Estatistica[i].Numero := i+1;
    Estatistica[i].Qtd_Vezes := 0;
  end;
end;

procedure TForm2.FormShow(Sender: TObject);
var
  i : integer;
begin
  sTotalNum := TStringList.Create;
  sSortedNum := TStringList.Create;
end;

function TForm2.GeraNumero(Jogados, iAtual : Integer ; var bAlteraJogo : Boolean) : Boolean;
var
  i,j : integer;
  bFoiJogado : boolean;
begin
  if iQtdJogos = iQtdJogosSelec then begin
    //ShowMessage('Atingiu quantidade de jogos');
    Exit;
  end;
  if iAtual = Jogados+StrToInt(edQtdAcertos.Text) then
    Exit;
  for i := Jogados + 1 to Jogados+StrToInt(edQtdAcertos.Text) do begin
    if (dsNumbers.DataSet.RecNo > Jogados+StrToInt(edQtdAcertos.Text)) then begin
      bAlteraJogo := True;
      dsNumbers.DataSet.First;
      for j := 0 to iQtdAJogar-1 do begin
        JogoTmp[j] := 0;
      end;

    end;
    if (bAlteraJogo) and (Jogados > 0) then begin
      Exit;
    end else
      bAlteraJogo := False;

    //dsNumbers.DataSet.First;
    // verificando se o número já não foi selecionado dentro deste jogo
    while not dsNumbers.DataSet.Eof do begin
      bFoiJogado := False;;
      for j := 0 to iQtdAJogar-1 do begin
        if JogoTmp[j] = 0 then
          Break;
        if JogoTmp[j] = dsNumbers.DataSet.FieldByName('number').AsInteger then begin
          bFoiJogado := True;
          Break;
        end;
      end;
      if bFoiJogado then
        dsNumbers.DataSet.Next
      else
        Break;
    end;

//    for j := 0 to iQtdAJogar-1 do begin
//    // vberificando se o número já não foi selecionado dentro deste jogo
//      if JogoTmp[j] = dsNumbers.DataSet.FieldByName('number').AsInteger then begin
//        dsNumbers.DataSet.Next;
//        Continue;
//      end;
//    end;

    // pegando o número menos jogado (o vtNumbers está sempre ordenado pela qtd de vezes q foi jogado do menor pro maior
    JogoTmp[Jogados] := dsNumbers.DataSet.FieldByName('number').AsInteger;
    if (Jogados + 1) >= iQtdAcertos then begin
      if not PodeJogar(dsNumbers.DataSet.FieldByName('number').AsInteger) then begin
        dsNumbers.DataSet.Next;
        Continue;
      end;
    end;
    if (Jogados + 1) = iQtdAJogar then begin
      Aposta();
      inc(iQtdJogos);
      dsNumbers.DataSet.First;
      bAlteraJogo := True;
      Break;
    end else begin
      //dsNumbers.DataSet.First;
      GeraNumero(Jogados+1, i, bAlteraJogo);
    end;
  end;
end;

function TForm2.PodeJogar(Jogados: Integer) : boolean;
var
  i, j, iAcertos : Integer;
begin
  Result := True;
  vtApostas.First;
  while not vtApostas.Eof do begin
    iAcertos := 0;
    for i := 0 to Jogados-1 do begin
      for j := 0 to iQtdAJogar-1 do begin
        if vtApostas.Fields[j].AsInteger = JogoTmp[i] then begin
          Inc(iAcertos);
          if iAcertos = iQtdAcertos then begin
            Result := False;
            Exit;
          end;

          Break;
        end;
      end;
    end;
    vtApostas.Next;
  end;

end;

Procedure TForm2.Sort(Top:integer);
var
  counter, min, look:integer;
  temp:integer; {if the array is of integer type then temp must be defined as 'integer' etc.}
begin
  for counter := 0 to Top do begin
    min:=counter;
    for look:=counter+1 to top do
      if JogoTmp[look]<JogoTmp[min] then
        min:=look;

    temp:=JogoTmp[min];
    JogoTmp[min]:=JogoTmp[counter];
    JogoTmp[counter]:=temp;
  end;
end;


procedure TForm2.Aposta();
var
  i : Integer;
begin
  Sort(iQtdAJogar-1);
  vtApostas.Append;
  for i := 0 to iQtdAJogar-1 do begin
    vtApostas.Fields[i].AsInteger := JogoTmp[i];
    if dsNumbers.DataSet.Locate('number',JogoTmp[i],[loCaseInsensitive]) then begin
      dsNumbers.DataSet.Edit;
      dsNumbers.DataSet.FieldByName('qtd').AsInteger := dsNumbers.DataSet.FieldByName('qtd').AsInteger + 1;
      dsNumbers.DataSet.Post;
    end;
    JogoTmp[i] := 0;
  end;
  vtApostas.Post;
end;

procedure TForm2.btGameClick(Sender: TObject);
var
  i : integer;
  bAlteraJogo : Boolean;
begin

  for i := 1 to StrToInt(edQtdNumTotal.Text) do begin
    dsNumbers.DataSet.Edit;
    dsNumbers.DataSet.FieldByName('qtd').AsInteger := 0;
    dsNumbers.DataSet.Post;
  end;
  iQtdAcertos    := StrToInt(edQtdAcertos.Text);
  iQtdAJogar     := StrToInt(edQtdAJogar.Text);
  iQtdTotal      := StrToInt(edQtdNumTotal.Text);
  iQtdJogosSelec := StrToInt(edQtdJogos.Text);
  vtApostas.Close;
  vtApostas.Clear;
  vtApostas.DeleteFields;
  for i := 1 to iQtdAJogar do begin
    vtApostas.AddField('Num' + IntToStr(i), ftInteger);
  end;
  vtApostas.FieldDefs.Update;
  vtApostas.Open;
  dsNumbers.DataSet.First;
  GeraNumero(0, 0, bAlteraJogo);
  StatusBar1.Panels[0].Text := 'Quantidade de Jogos: ' + IntToStr(vtApostas.RecordCount);

end;

procedure TForm2.Button1Click(Sender: TObject);
var
  i : integer;
begin
  iQtdAcertos    := StrToInt(edQtdAcertos.Text);
  iQtdAJogar     := StrToInt(edQtdAJogar.Text);
  iQtdTotal      := StrToInt(edQtdNumTotal.Text);
  iQtdJogosSelec := StrToInt(edQtdJogos.Text);
  for i := 0 to iQtdAJogar-1 do begin
    JogoTmp[i] := ((i - iQtdAJogar) * -1);
  end;
  sort(iQtdAJogar-1);
  Memo1.clear();
  for i := 0 to iQtdTotal-1 do begin
    Memo1.Lines.add(IntToStr(JogoTmp[i]));
  end;

end;

function TForm2.fat (n: Integer):Integer;
var i: Integer;
begin

  Result := 1;

  for i := 2 to n do
    Result := Result * i;

end;

//procedure next_combination (pos: integer);
//begin
//
//  if (pos = 0) then
//    Exit;
//
//  inc (combination[pos]);
//
//  if (combination[pos] > max_values[pos]) then begin
//
//     next_combination (pos - 1);
//
//     combination[pos] := combination[pos - 1] + 1;
//
//  end;
//
//end;

end.
